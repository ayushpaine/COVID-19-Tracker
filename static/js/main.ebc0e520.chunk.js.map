{"version":3,"sources":["Stats.js","mapCircles.js","CasesMap.js","Table.js","sort.js","Graph.js","statStyle.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","background","border","borderRadius","height","width","boxShadow","Stats","title","cases","total","onClick","active","isGrey","isGreen","isRed","classes","Card","className","CardContent","Typography","color","style","font","caseTypeColors","rgb","half_op","multiplier","recovered","deaths","mapCircles","data","caseType","map","country","Circle","center","countryInfo","lat","long","pathOptions","fillColor","radius","Math","sqrt","Popup","minWidth","src","flag","numeral","format","ChangeView","zoom","countries","useMap","setView","CasesMap","MapContainer","TileLayer","attribution","url","Table","sortData","sortedData","sort","a","b","options","responsive","maintainAspectRatio","elements","point","legend","display","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","fill","borderColor","backgroundColor","statStyle","stat","App","setCountries","setCountry","mapCountries","setMapCountries","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCaseType","resp","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","s","FormControl","TextField","select","variant","onChange","helperText","MenuItem","todayCases","todayRecovered","todayDeaths","textTransform","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebc0e520.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"./Stats.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    background: \"#ffffff\",\r\n    border: 0,\r\n    borderRadius: 6,\r\n    height: 100,\r\n    width: 200,\r\n    boxShadow: \" -5px 3px 82px -6px rgba(\t144, 202, 249,0.);\",\r\n  },\r\n});\r\n\r\nfunction Stats({\r\n  title,\r\n  cases,\r\n  total,\r\n  onClick,\r\n  active,\r\n  isGrey,\r\n  isGreen,\r\n  isRed,\r\n}) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card\r\n      className={`statCard \r\n      ${active && \"statChange\"}\r\n      `}\r\n      onClick={onClick}\r\n    >\r\n      <CardContent className={classes.root}>\r\n        <div\r\n          className={`\r\n      ${active && \"div-Change\"}\r\n      `}\r\n        >\r\n          <Typography color=\"textSecondary\" className=\"statTitle\">\r\n            {title}\r\n          </Typography>\r\n          <h1\r\n            className={`statCases ${!isGrey && !isRed && \"statGreen\"}\r\n           ${!isGrey && !isGreen && \"statRed\"}`}\r\n            style={{ font: `16px` }}\r\n          >\r\n            +{cases}\r\n          </h1>\r\n          <Typography color=\"textPrimary\" className=\"statTotal\">\r\n            +{total} Total\r\n          </Typography>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Stats;\r\n","import React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\nimport \"./mapCircles.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nconst caseTypeColors = {\r\n  cases: {\r\n    rgb: \"rgb(102, 102, 102)\",\r\n    half_op: \"rgb(102, 102, 102,0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    rgb: \"rgba(65, 199, 65,0.7)\",\r\n    half_op: \"rgba(65, 199, 65,1)\",\r\n    multiplier: 400,\r\n  },\r\n  deaths: {\r\n    rgb: \"rgb(255, 60, 60)\",\r\n    half_op: \"rgb(255, 60, 60,0.5)\",\r\n    multiplier: 1000,\r\n  },\r\n};\r\n\r\nexport const mapCircles = (data, caseType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      pathOptions={{\r\n        color: `${caseTypeColors[caseType].half_op}`,\r\n        fillColor: `${caseTypeColors[caseType].rgb}`,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[caseType]) * caseTypeColors[caseType].multiplier\r\n      }\r\n    >\r\n      <Popup minWidth=\"auto\">\r\n        <div className=\"popup-container\">\r\n          <div className=\"flag-container\">\r\n            <img src={`${country.countryInfo.flag}`} />\r\n          </div>\r\n          <div className=\"stats-container\">\r\n            <div className=\"map-name\">{country.country}</div>\r\n            <div className=\"map-cases\">\r\n              Cases:\r\n              <div style={{ color: `gray` }}>\r\n                {numeral(country.cases).format(\"0,0\")}\r\n              </div>\r\n            </div>\r\n            <div className=\"map-recovered\">\r\n              Recovered:\r\n              <div style={{ color: `green ` }}>\r\n                {numeral(country.recovered).format(\"0,0\")}\r\n              </div>\r\n            </div>\r\n            <div className=\"map-deaths\">\r\n              Deaths:\r\n              <div style={{ color: `red` }}>\r\n                {numeral(country.deaths).format(\"0,0\")}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap, setView } from \"react-leaflet\";\r\nimport \"./CasesMap.css\";\r\nimport { mapCircles } from \"./mapCircles\";\r\n\r\nfunction ChangeView({ center, zoom, countries, caseType }) {\r\n  const map = useMap();\r\n  map.setView(center, zoom);\r\n  return 0;\r\n}\r\nfunction CasesMap({ center, zoom, countries, caseType }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <MapContainer center={center} zoom={zoom}>\r\n        <ChangeView center={center} zoom={zoom} />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {mapCircles(countries, caseType)}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CasesMap;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td> {country} </td>\r\n          <td>\r\n            <strong> {numeral(cases).format(\"0,0\")} </strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","export const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./Graph.css\";\r\n\r\nconst options = {\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n\r\n  elements: {\r\n    point: {\r\n      radius: 2,\r\n    },\r\n  },\r\n  legend: {\r\n    display: false,\r\n  },\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className=\"graph-fill\">\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: [],\r\n                fill: \"start\",\r\n                borderColor: \"rgb(39, 49, 90,0.8)\",\r\n                backgroundColor: \"rgb(144,202,249,0.5)\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import numeral from \"numeral\";\r\nimport React from \"react\";\r\n\r\nexport const statStyle = (stat) =>\r\n  stat ? `${numeral(stat).format(\"0.0a\")}` : `+0`;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n  TextField,\n} from \"@material-ui/core\";\nimport Stats from \"./Stats\";\nimport CasesMap from \"./CasesMap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"./Table\";\nimport { sortData } from \"./sort\";\nimport LineGraph from \"./Graph\";\nimport \"leaflet/dist/leaflet.css\";\nimport { statStyle } from \"./statStyle\";\n\nconst useStyles = makeStyles({\n  root: {\n    background: \"#90caf9\",\n    border: 0,\n    borderRadius: 3,\n    color: \"#27313A\",\n    height: 80,\n    width: 280,\n    borderRadius: 6,\n    boxShadow: \" -5px 3px 82px -6px rgba(\t144, 202, 249,0.2);\",\n  },\n});\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [mapCountries, setMapCountries] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 40.3, lng: 10 });\n  const [mapZoom, setMapZoom] = useState(2.4);\n  const [caseType, setCaseType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((resp) => resp.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((resp) => resp.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((resp) => resp.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(5);\n      });\n  };\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 style={{ color: \"#90caf9\" }} s>\n            COVID-19 Tracker\n          </h1>\n          <FormControl className=\"App-dropdown\">\n            <TextField\n              select\n              label=\"Select\"\n              variant=\"filled\"\n              onChange={onCountryChange}\n              className={classes.root}\n              helperText=\"Select Your Country\"\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </TextField>\n          </FormControl>\n        </header>\n      </div>\n      <div className=\"stats\">\n        <Stats\n          isGrey\n          active={caseType === \"cases\"}\n          onClick={(e) => setCaseType(\"cases\")}\n          title=\"Coronavirus Cases\"\n          cases={statStyle(countryInfo.todayCases)}\n          total={statStyle(countryInfo.cases)}\n        />\n        <Stats\n          isGreen\n          active={caseType === \"recovered\"}\n          onClick={(e) => setCaseType(\"recovered\")}\n          title=\"Coronavirus Recovered\"\n          cases={statStyle(countryInfo.todayRecovered)}\n          total={statStyle(countryInfo.recovered)}\n        />\n        <Stats\n          isRed\n          active={caseType === \"deaths\"}\n          onClick={(e) => setCaseType(\"deaths\")}\n          title=\"Coronavirus Deaths\"\n          cases={statStyle(countryInfo.todayDeaths)}\n          total={statStyle(countryInfo.deaths)}\n        />\n      </div>\n      <CasesMap\n        center={mapCenter}\n        zoom={mapZoom}\n        countries={mapCountries}\n        caseType={caseType}\n      />\n      <div className=\"live\">\n        <Card className=\"live-card\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n          </CardContent>\n        </Card>\n        <div className=\"container\">\n          <div className=\"card-info\">\n            <h3 style={{ textTransform: `capitalize` }}>\n              Worldwide New {caseType}\n            </h3>\n\n            <LineGraph className=\"graph-fill\" casesType={caseType} />\n          </div>\n        </div>\n        <div>\n          <br />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}